name: Run tests

on:
  push:
    branches:
      - main
      - '*.x'
  pull_request:
  # Run weekly on Monday at 1:23 UTC
  schedule:
  - cron:  '23 1 * * 1'
  workflow_dispatch:


jobs:
  build:
    runs-on: ${{ matrix.os }}
    # Disable scheduled CI runs on forks
    if: github.event_name != 'schedule' || github.repository_owner == 'ipython'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
      - name: Install build deps
        run: |
          python -m pip install --only-binary ':all:' --upgrade build check-manifest
      - name: Try building with Python build
        run: |
          pyproject-build
          shasum -a 256 dist/* | tee dist/SHA256SUMS
      - name: Check manifest
        run: check-manifest
      - name: Upload distributions for tesitng
        uses: actions/upload-artifact@v4
        with:
          name: ipython-dist-${{ github.run_number }}
          path: dist

  test:
    needs: [build]
    runs-on: ${{ matrix.os }}
    # Disable scheduled CI runs on forks
    if: github.event_name != 'schedule' || github.repository_owner == 'ipython'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]
        deps: [test_extra]
        # Test all on ubuntu, test ends on macos
        include:
          - os: macos-latest
            python-version: "3.11"
            deps: test_extra
          # Tests minimal dependencies set
          - os: ubuntu-latest
            python-version: "3.11"
            deps: test
          # Tests latest development Python version
          - os: ubuntu-latest
            python-version: "3.13"
            deps: test
          # Installing optional dependencies stuff takes ages on PyPy
          # - os: ubuntu-latest
          #   python-version: "pypy-3.11"
          #   deps: test
          # - os: windows-latest
          #   python-version: "pypy-3.11"
          #   deps: test
          # - os: macos-latest
          #   python-version: "pypy-3.11"
          #   deps: test
          # Temporary CI run to use entry point compatible code in matplotlib-inline.
          - os: ubuntu-latest
            python-version: "3.12"
            deps: test_extra
            want-latest-entry-point-code: true

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: |
          pyproject.toml
    - name: Install latex
      if: runner.os == 'Linux' && matrix.deps == 'test_extra'
      run: echo "disable latex for now, issues in mirrors"
      # sudo apt-get -yq -o Acquire::Retries=3 --no-install-suggests --no-install-recommends install texlive dvipng
    - name: Download distributions for tesitng
      uses: actions/download-artifact@v4
      with:
        name: ipython-dist-${{ github.run_number }}
        path: dist
    - name: Install and update Python dependencies (binary only)
      if: ${{ ! contains( matrix.python-version, 'dev' ) }}
      run: |
        python -m pip install --only-binary ':all:' --upgrade pip
        python -c "from pathlib import Path; print(f'''ipython[${{ matrix.deps }}] @ {next(Path('dist').glob('*.whl')).as_uri()}''')" > requirements.txt
        echo "pytest-cov" >> requirements.txt
        echo "pytest<8" >> requirements.txt
        python -m pip install --only-binary ':all:' --no-binary curio --upgrade -r requirements.txt
    - name: Install and update Python dependencies (dev?)
      if: ${{ contains( matrix.python-version, 'dev' ) }}
      run: |
        python -m pip install --pre --upgrade pip
        python -c "from pathlib import Path; print(f'''ipython[${{ matrix.deps }}] @ {next(Path('dist').glob('*.whl')).as_uri()}''')" > requirements.txt
        echo "pytest-cov" >> requirements.txt
        python -m pip install --pre --extra-index-url https://pypi.anaconda.org/scientific-python-nightly-wheels/simple --no-binary curio --upgrade -r requirements.txt
    - name: Install entry point compatible code (TEMPORARY, April 2024)
      if: matrix.want-latest-entry-point-code
      # Not installing matplotlib's entry point code as building matplotlib from source is complex.
      # Rely upon matplotlib to test all the latest entry point branches together.
      run: |
        python -m pip install --upgrade git+https://github.com/ipython/matplotlib-inline.git@main
    - name: Check python dependency metadata
      run: |
        python -m pip list --format=freeze
        python -m pip check
    - name: pytest
      env:
        COLUMNS: 120
      run: |
        cd tests && pytest --color=yes -raXxs ${{ startsWith(matrix.python-version, 'pypy') && ' ' || '--cov --cov-report=xml' }} --maxfail=15
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
         name: Test
         files: tests/coverage.xml
